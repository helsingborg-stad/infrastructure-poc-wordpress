AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications onto a cluster of EC2
             hosts using Elastic Container Service. This stack runs containers on
             hosts that are in a public VPC subnet, and includes a public facing load
             balancer to register the services in.
Parameters:
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t3.micro, t3.small, t3.medium, t3.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.

Resources:
##
# Autoscaling
##

  AutoScalingAutoScalingGroupECS:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
      LaunchConfigurationName: !Ref AutoScalingLaunchConfigurationContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  AutoScalingLaunchConfigurationContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      SecurityGroups: 
        - !Ref EC2SecurityGroupECSHost
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingAutoScalingGroupECS --region ${AWS::Region}

##
# EC2
##

  EC2SecurityGroupECSHost:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID

  EC2SecurityGroupPublicLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  EC2SecurityGroupIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref EC2SecurityGroupECSHost
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroupECSHost
            
  EC2SecurityGroupIngressPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref EC2SecurityGroupECSHost
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroupPublicLoadBalancer

##
# ECS
##

  ECSCluster:
    Type: AWS::ECS::Cluster

##
# IAM
##

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IAMRoleEC2

  IAMRoleEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - ec2.amazonaws.com
          Action: 
            - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ecr:GetAuthorizationToken
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource: '*'

  IAMRoleECS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - ecs.amazonaws.com
          Action: 
            - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ec2:AttachNetworkInterface
              - ec2:CreateNetworkInterface
              - ec2:CreateNetworkInterfacePermission
              - ec2:DeleteNetworkInterface
              - ec2:DeleteNetworkInterfacePermission
              - ec2:Describe*
              - ec2:DetachNetworkInterface
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:RegisterTargets
            Resource: '*'
##
# ElasticLoadBalancingV2
##

  ElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets:
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet1
        - Fn::ImportValue: infrastructure-poc-wordpress-vpc-PublicSubnet2
      SecurityGroups: 
        - !Ref EC2SecurityGroupPublicLoadBalancer

  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ElasticLoadBalancingV2LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroupDummy
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
        
  ElasticLoadBalancingV2TargetGroupDummy:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: poc-wp-dummy # TODO howto 32 char limit for some stupid reason.!Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: infrastructure-poc-wordpress-vpc-VPCID

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub "http://${ElasticLoadBalancingV2LoadBalancer.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-ExternalUrl"
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt IAMRoleECS.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSRole"
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref ElasticLoadBalancingV2Listener
    Export:
      Name: !Sub "${AWS::StackName}-PublicListener"
  EC2SecurityGroupECSHost:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref EC2SecurityGroupECSHost
    Export:
      Name: !Sub "${AWS::StackName}-EC2SecurityGroupECSHost"
